datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Pilot {
  id          Int              @id @default(autoincrement())
  email       String           @unique
  ivaoId      String?          @unique
  vatsimId    String?          @unique
  firstName   String
  lastName    String
  birthDate   DateTime?
  callsign    String?
  password    String?
  hours       Float            @default(0)
  rankId           Int?
  rank             Rank?            @relation(fields: [rankId], references: [id])
  locationIcao     String?
  location         Airport?         @relation(fields: [locationIcao], references: [icao])
  points           Int              @default(0)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  pilotPermissions PilotPermission[]
  flights     Flight[]
  reportTours    ReportTour[]
  pilotMedals PilotMedal[]
  staffList        StaffList?       @relation("PilotToStaffList")
  pilotAirline     PilotAirline?    @relation("PilotToPilotAirline")
  pilotHub         PilotHub?        @relation("PilotToPilotHub")
}

model Permission {
  id          Int              @id @default(autoincrement())
  name        String           @unique // Example: "VIEW_PILOTS", "MANAGE_FLIGHTS"
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  pilotPermissions PilotPermission[]
}

model PilotPermission {
  pilotId     Int      @map("pilot_id")
  permissionId Int     @map("permission_id")
  pilot       Pilot    @relation(fields: [pilotId], references: [id])
  permission  Permission @relation(fields: [permissionId], references: [id])
  createdAt   DateTime @default(now())
  @@id([pilotId, permissionId])
  @@map("PilotPermissions")
}

model Flight {
  id        Int      @id @default(autoincrement())
  pilotId   Int
  pilot     Pilot    @relation(fields: [pilotId], references: [id])
  route     String
  aircraft  String
  status    String   @default("Pending")
  pirep     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Rules {
  id        Int      @id @default(autoincrement())
  lang      String   @db.VarChar(4)
  text      String   @db.VarChar(1024)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SocialNetwork {
  id        Int      @id @default(autoincrement())
  icon      String   @db.VarChar(255)
  url       String   @db.VarChar(255)
  name      String   @db.VarChar(100)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Documentation {
  id        Int      @id @default(autoincrement())
  url       String   @db.VarChar(255)
  name      String   @db.VarChar(100)
  isPublic  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id              Int      @id @default(autoincrement())
  time_event_start DateTime
  time_event_end   DateTime
  open_view_date   DateTime
  close_view_date  DateTime
  text            String   @db.VarChar(1024)
  description     String   @db.VarChar(2048)
  banner          String   @db.VarChar(255)
  points          Int
  lang            String   @db.VarChar(4)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Notam {
  id              Int      @id @default(autoincrement())
  title           String   @db.VarChar(255)
  text            String   @db.VarChar(1024)
  lang            String   @db.VarChar(4)
  active_date     DateTime
  desactivate_date DateTime
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Config {
  name        String   @id
  description String?
  isActive    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Simulator {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(100)
  logo      String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  paintkits Paintkit[]
}

model Airline {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(100)
  logo      String   @db.VarChar(255)
  tail      String   @db.VarChar(255)
  can_join  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  routes    Route[]
  fleet     Fleet[]
  hubs      Hub[]
  pilotAirlines PilotAirline[]
}

model Medal {
  id        Int      @id @default(autoincrement())
  img       String   @db.VarChar(255)
  text      String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tours     Tour[]
  pilotMedals PilotMedal[]
}

model Rank {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(100)
  img       String   @db.VarChar(255)
  hours     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  fleets    Fleet[]
  hubs      Hub[]
  pilots    Pilot[]
}

model Airport {
  icao      String   @id @db.VarChar(4)
  iata      String?   @db.VarChar(3)
  name      String   @db.VarChar(100)
  country   String   @db.VarChar(100)
  latitude  Float
  longitude Float
  altitude  Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  departureRoutes Route[]    @relation("DepartureAirport")
  arrivalRoutes   Route[]    @relation("ArrivalAirport")
  departureLegs   Leg[]      @relation("DepartureLeg")
  arrivalLegs     Leg[]      @relation("ArrivalLeg")
  hubs            Hub[]
  pilots          Pilot[]
}

model Aircraft {
  id             Int      @id @default(autoincrement())
  icao           String   @db.VarChar(4)
  manufacturer   String   @db.VarChar(100)
  range          Int
  max_passengers Int
  img            String   @db.VarChar(255)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  fleet          Fleet[]
  paintkits      Paintkit[]
}

model Fleet {
  id         Int      @id @default(autoincrement())
  aircraftId Int
  aircraft   Aircraft @relation(fields: [aircraftId], references: [id])
  airlineId  Int
  airline    Airline  @relation(fields: [airlineId], references: [id])
  name       String   @db.VarChar(100)
  reg        String   @db.VarChar(6)
  state      String   @db.VarChar(50)
  life       Int
  rankId     Int?
  rank       Rank?    @relation(fields: [rankId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  routes       Route[]
}

model Paintkit {
  id          Int      @id @default(autoincrement())
  simulatorId Int
  simulator   Simulator @relation(fields: [simulatorId], references: [id])
  url         String   @db.VarChar(255)
  aircraftId  Int
  aircraft    Aircraft @relation(fields: [aircraftId], references: [id])
  developer   String   @db.VarChar(100)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Route {
  id            Int        @id @default(autoincrement())
  departureIcao String
  departure     Airport    @relation("DepartureAirport", fields: [departureIcao], references: [icao])
  arrivalIcao   String
  arrival       Airport    @relation("ArrivalAirport", fields: [arrivalIcao], references: [icao])
  fleetId       Int
  fleet         Fleet      @relation(fields: [fleetId], references: [id])
  airlineId     Int
  airline       Airline    @relation(fields: [airlineId], references: [id])
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model RequestJoin {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(100)
  id_ivao   String?  @db.VarChar(20)
  id_vatsim String?  @db.VarChar(20)
  birthday  DateTime
  email     String   @db.VarChar(255)
  status    Int      @default(0) // 0: pending, 1: approved, 2: rejected
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tour {
  id          Int      @id @default(autoincrement())
  medalId     Int
  medal       Medal    @relation(fields: [medalId], references: [id])
  img         String   @db.VarChar(255)
  name        String   @db.VarChar(100)
  description String   @db.VarChar(255)
  open_day    DateTime
  close_day   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  legs        Leg[]
}

model Leg {
  id                   Int      @id @default(autoincrement())
  tourId               Int
  tour                 Tour     @relation(fields: [tourId], references: [id])
  airportDepartureIcao String
  airportDeparture     Airport  @relation("DepartureLeg", fields: [airportDepartureIcao], references: [icao])
  airportArrivalIcao   String
  airportArrival       Airport  @relation("ArrivalLeg", fields: [airportArrivalIcao], references: [icao])
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  reportTours          ReportTour[]
}

model ReportTour {
  id             Int      @id @default(autoincrement())
  userId         Int
  user           Pilot    @relation(fields: [userId], references: [id])
  legId          Int
  leg            Leg      @relation(fields: [legId], references: [id])
  status         Int      @default(0) // 0: pending, 1: accepted, 2: rejected
  time_departure DateTime
  time_arrival   DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model StaffList {
  id               Int      @id @default(autoincrement())
  pilotId          Int      @unique // Ensure one-to-one by adding @unique
  nameRolePosition String   @db.VarChar(100)
  priority         Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  pilot            Pilot    @relation("PilotToStaffList", fields: [pilotId], references: [id], onDelete: Cascade)
}

model Hub {
  id         Int      @id @default(autoincrement())
  airportId  String   @map("airport_id")
  airport    Airport  @relation(fields: [airportId], references: [icao])
  airlineId  Int      @map("airline_id")
  airline    Airline  @relation(fields: [airlineId], references: [id])
  rankId     Int?     @map("rank_id")
  rank       Rank?    @relation(fields: [rankId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  pilotHubs  PilotHub[]
}

model PilotAirline {
  id        Int      @id @default(autoincrement())
  pilotId   Int      @unique
  airlineId Int
  pilot     Pilot    @relation("PilotToPilotAirline", fields: [pilotId], references: [id])
  airline   Airline  @relation(fields: [airlineId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PilotHub {
  id        Int      @id @default(autoincrement())
  pilotId   Int      @unique
  hubId     Int
  pilot     Pilot    @relation("PilotToPilotHub", fields: [pilotId], references: [id])
  hub       Hub      @relation(fields: [hubId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PilotMedal {
  pilotId   Int      @map("pilot_id")
  medalId   Int      @map("medal_id")
  pilot     Pilot    @relation(fields: [pilotId], references: [id], onDelete: Cascade)
  medal     Medal    @relation(fields: [medalId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@id([pilotId, medalId])
  @@map("PilotMedals")
}